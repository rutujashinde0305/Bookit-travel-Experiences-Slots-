// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = String(import.meta.env.VITE_SUPABASE_URL || "");
const SUPABASE_PUBLISHABLE_KEY = String(import.meta.env.VITE_SUPABASE_PUBLISHABLE_KEY || "");

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

function isValidUrl(url: string) {
  try {
    const u = new URL(url);
    return u.protocol === 'http:' || u.protocol === 'https:';
  } catch {
    return false;
  }
}

// If the env URL is not a valid http(s) URL (for example when using the
// placeholder values in `.env.local`), create a lightweight mock that
// prevents the runtime from throwing. Components that rely on Supabase
// should handle the mock's responses (typically null data / an error)
// or use the project's `mocks/api` during local development.
let _supabase: unknown;
if (isValidUrl(SUPABASE_URL) && SUPABASE_PUBLISHABLE_KEY) {
  _supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
    auth: {
      storage: localStorage,
      persistSession: true,
      autoRefreshToken: true,
    },
  });
} else {
  // Minimal mock implementation with the chainable `.from(...).select(...).eq(...).single()`
  // so pages like Confirmation.tsx can call into it without a hard crash.
  _supabase = {
    from: (_table: string) => ({
      select: (_q?: string) => ({
        eq: (_col: string, _val: any) => ({
          single: async () => ({ data: null, error: new Error('Supabase not configured') }),
        }),
      }),
    }),
  } as unknown as ReturnType<typeof createClient>;
}

export const supabase = _supabase as unknown as ReturnType<typeof createClient>;